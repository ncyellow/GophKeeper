// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ncyellow/GophKeeper/internal/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddBinary mocks base method.
func (m *MockStorage) AddBinary(ctx context.Context, userID int64, binData models.Binary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBinary", ctx, userID, binData)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBinary indicates an expected call of AddBinary.
func (mr *MockStorageMockRecorder) AddBinary(ctx, userID, binData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBinary", reflect.TypeOf((*MockStorage)(nil).AddBinary), ctx, userID, binData)
}

// AddCard mocks base method.
func (m *MockStorage) AddCard(ctx context.Context, userID int64, card models.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCard", ctx, userID, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCard indicates an expected call of AddCard.
func (mr *MockStorageMockRecorder) AddCard(ctx, userID, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockStorage)(nil).AddCard), ctx, userID, card)
}

// AddLogin mocks base method.
func (m *MockStorage) AddLogin(ctx context.Context, userID int64, login models.Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogin", ctx, userID, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLogin indicates an expected call of AddLogin.
func (mr *MockStorageMockRecorder) AddLogin(ctx, userID, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogin", reflect.TypeOf((*MockStorage)(nil).AddLogin), ctx, userID, login)
}

// AddText mocks base method.
func (m *MockStorage) AddText(ctx context.Context, userID int64, text models.Text) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddText", ctx, userID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddText indicates an expected call of AddText.
func (mr *MockStorageMockRecorder) AddText(ctx, userID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddText", reflect.TypeOf((*MockStorage)(nil).AddText), ctx, userID, text)
}

// Binary mocks base method.
func (m *MockStorage) Binary(ctx context.Context, userID int64, binID string) (*models.Binary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Binary", ctx, userID, binID)
	ret0, _ := ret[0].(*models.Binary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Binary indicates an expected call of Binary.
func (mr *MockStorageMockRecorder) Binary(ctx, userID, binID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Binary", reflect.TypeOf((*MockStorage)(nil).Binary), ctx, userID, binID)
}

// Card mocks base method.
func (m *MockStorage) Card(ctx context.Context, userID int64, cardID string) (*models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Card", ctx, userID, cardID)
	ret0, _ := ret[0].(*models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Card indicates an expected call of Card.
func (mr *MockStorageMockRecorder) Card(ctx, userID, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Card", reflect.TypeOf((*MockStorage)(nil).Card), ctx, userID, cardID)
}

// Close mocks base method.
func (m *MockStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// DeleteBinary mocks base method.
func (m *MockStorage) DeleteBinary(ctx context.Context, userID int64, binID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBinary", ctx, userID, binID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBinary indicates an expected call of DeleteBinary.
func (mr *MockStorageMockRecorder) DeleteBinary(ctx, userID, binID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinary", reflect.TypeOf((*MockStorage)(nil).DeleteBinary), ctx, userID, binID)
}

// DeleteCard mocks base method.
func (m *MockStorage) DeleteCard(ctx context.Context, userID int64, cardID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, userID, cardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockStorageMockRecorder) DeleteCard(ctx, userID, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockStorage)(nil).DeleteCard), ctx, userID, cardID)
}

// DeleteLogin mocks base method.
func (m *MockStorage) DeleteLogin(ctx context.Context, userID int64, loginID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogin", ctx, userID, loginID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogin indicates an expected call of DeleteLogin.
func (mr *MockStorageMockRecorder) DeleteLogin(ctx, userID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogin", reflect.TypeOf((*MockStorage)(nil).DeleteLogin), ctx, userID, loginID)
}

// DeleteText mocks base method.
func (m *MockStorage) DeleteText(ctx context.Context, userID int64, textID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteText", ctx, userID, textID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteText indicates an expected call of DeleteText.
func (mr *MockStorageMockRecorder) DeleteText(ctx, userID, textID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteText", reflect.TypeOf((*MockStorage)(nil).DeleteText), ctx, userID, textID)
}

// Login mocks base method.
func (m *MockStorage) Login(ctx context.Context, userID int64, loginID string) (*models.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, userID, loginID)
	ret0, _ := ret[0].(*models.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockStorageMockRecorder) Login(ctx, userID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStorage)(nil).Login), ctx, userID, loginID)
}

// Register mocks base method.
func (m *MockStorage) Register(ctx context.Context, user models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockStorageMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockStorage)(nil).Register), ctx, user)
}

// Text mocks base method.
func (m *MockStorage) Text(ctx context.Context, userID int64, textID string) (*models.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text", ctx, userID, textID)
	ret0, _ := ret[0].(*models.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Text indicates an expected call of Text.
func (mr *MockStorageMockRecorder) Text(ctx, userID, textID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockStorage)(nil).Text), ctx, userID, textID)
}

// User mocks base method.
func (m *MockStorage) User(ctx context.Context, login, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", ctx, login, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockStorageMockRecorder) User(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockStorage)(nil).User), ctx, login, password)
}

// UserByLogin mocks base method.
func (m *MockStorage) UserByLogin(ctx context.Context, login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByLogin", ctx, login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByLogin indicates an expected call of UserByLogin.
func (mr *MockStorageMockRecorder) UserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByLogin", reflect.TypeOf((*MockStorage)(nil).UserByLogin), ctx, login)
}
